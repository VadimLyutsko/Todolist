{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","addItem","useState","title","setTitle","error","setError","addNewItem","trimmedTitle","trim","TextField","style","marginBottom","label","value","onChange","e","currentTarget","onKeyDown","key","className","placeholder","helperText","IconButton","onClick","AddCircleOutlineTwoTone","fontSize","EditableSpan","props","isEditMode","setIsEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasksList","tasks","length","List","map","t","ListItem","id","isDone","Checkbox","color","changeTaskStatus","checked","todoListId","changeTaskTitle","removeTask","DeleteOutlineRounded","handlerCreator","filter","changeTodoListFilter","Typography","variant","align","changeTodoListTitle","Button","removeTodoList","addTask","ButtonGroup","display","justifyContent","disableElevation","size","marginRight","borderRadius","App","todoListId_1","v1","todoListId_2","todoListTitle","todoLists","setTodoLists","setTasks","taskId","copyTasks","newTask","newTaskStatus","getFilteredTasks","f","tasksForTodoList","todoListComponents","Grid","item","Paper","width","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","newToDoListId","newToDoList","spacing","Boolean","window","location","hostname","match","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50469c7c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircleOutlineTwoTone} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = ({addItem}) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n\r\n    const onChangeSetLocalTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(false);\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onEnterDownAddItem = (e: KeyboardEvent<HTMLInputElement>) => e.key === 'Enter' && addNewItem();\r\n\r\n    // const errorMessage = error ? <StepLabel error={error} style={{fontWeight: 'bold', color: 'hotpink'}}>Title is required!</StepLabel > : null;\r\n\r\n    const addNewItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle !== '') {\r\n            addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{marginBottom:'20px'}}\r\n                label={'New here'}\r\n                value={title}\r\n                onChange={onChangeSetLocalTitle}\r\n                onKeyDown={onEnterDownAddItem}\r\n                className={error ? 'error' : ''}\r\n                placeholder='Touch me :)'\r\n                error={error}\r\n                helperText={error&&'Title is required!'}\r\n            />\r\n            <IconButton onClick={addNewItem}>\r\n                <AddCircleOutlineTwoTone fontSize={'small'}/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [isEditMode, setIsEditMode] = useState(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => {\r\n        setIsEditMode(true);\r\n    };\r\n\r\n    const offEditMode = () => {\r\n        setIsEditMode(false);\r\n        props.changeTitle(title)\r\n    };\r\n\r\n    const onChangeSetLocalTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n\r\n        isEditMode ?\r\n\r\n            <TextField\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={onChangeSetLocalTitle}\r\n            /> :\r\n            <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from '@material-ui/core';\r\nimport {DeleteOutlineRounded} from '@material-ui/icons';\r\n//rsc\r\ntype TodoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\nconst TodoList = (props: TodoListPropsType) => {\r\n\r\n    const getTasksListItem = (t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListId);\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListId);\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.todoListId);\r\n        };\r\n\r\n        return (\r\n            <ListItem   key={t.id} className={t.isDone ? 'isDone' : 'notIsDone'}>\r\n                <Checkbox\r\n                     color={'default'}\r\n                    onChange={changeTaskStatus}\r\n                    // type={'checkbox'}\r\n                    checked={t.isDone}\r\n                />\r\n                {/*<span>{t.title}</span>*/}\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={removeTask}><DeleteOutlineRounded/></IconButton>\r\n            </ListItem>\r\n        );\r\n    };\r\n\r\n    const tasksList = props.tasks.length\r\n        ? <List  >{props.tasks.map(getTasksListItem)}</List>\r\n        : <span>Ты всё выполнил, тупица!!!</span>;\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListId);\r\n    };\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.todoListId);\r\n\r\n    const handlerCreator = (filter: FilterValuesType) => () => props.changeTodoListFilter(filter, props.todoListId);\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListId);\r\n    };\r\n    return (\r\n        <div >\r\n            <Typography variant={'h5'} align={'center'}>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <Button variant={'text'} onClick={removeTodoList}>&#128169;</Button>\r\n            </Typography>\r\n            <div>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n            {tasksList}\r\n            <div>\r\n                <ButtonGroup style={{display:'flex',justifyContent:\"space-around\"}} disableElevation  variant='contained' size={'small'} >\r\n                <Button\r\n                    style={{marginRight:\"3px\",borderRadius:'10px'}}\r\n                    color={props.filter === 'all' ? 'primary' : 'secondary'}\r\n                    onClick={handlerCreator('all')}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    style={{marginRight:\"3px\",borderRadius:'10px'}}\r\n                    color={props.filter === 'active' ? 'primary' : 'secondary'}\r\n                    onClick={handlerCreator('active')}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginRight:\"3px\",borderRadius:'10px'}}\r\n                    color={props.filter === 'completed' ? 'primary' : 'secondary'}\r\n                    onClick={handlerCreator('completed')}\r\n                >Completed\r\n                </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = { [todoListId: string]: Array<TaskType> }\r\n\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListId_1 = v1();\r\n    const todoListId_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId_1, todoListTitle: 'What to do', filter: 'all'},\r\n        {id: todoListId_2, todoListTitle: 'What to buy', filter: 'completed'},\r\n    ]);\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: '2222&CSS', isDone: true},\r\n            {id: v1(), title: 'Trees', isDone: true},\r\n            {id: v1(), title: 'Grass', isDone: true},\r\n        ]\r\n    });\r\n\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        const copyTasks = {...tasks};\r\n        copyTasks[todoListId] = copyTasks[todoListId].filter(t => t.id !== taskId);\r\n        setTasks(copyTasks);\r\n\r\n        // setTasks({...tasks, [todoListId]:tasks[todoListId].filter(t => t.id !== taskId)})\r\n    };\r\n    const addTask = (title: string, todoListId: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]});\r\n    };\r\n    const changeTaskStatus = (taskId: string, newTaskStatus: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks, [todoListId]: tasks[todoListId]\r\n                .map(t => t.id === taskId ? {...t, isDone: newTaskStatus} : t)\r\n        });\r\n    };\r\n\r\n\r\n    const changeTaskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks, [todoListId]: tasks[todoListId]\r\n                .map(t => t.id === taskId ? {...t, title: title} : t)\r\n        });\r\n    };\r\n\r\n    // todolists\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(t => t.id !== todoListId));\r\n        delete tasks[todoListId];\r\n    };\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todoListId ? {...t, filter: filter} : t));\r\n    };\r\n\r\n    const changeTodoListTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(t => t.id === todoListId ? {...t, todoListTitle: title} : t));\r\n    };\r\n\r\n    const addToDoList = (title: string) => {\r\n        const newToDoListId: string = v1();\r\n        const newToDoList: TodoListType = {\r\n            id: newToDoListId,\r\n            todoListTitle: title,\r\n            filter: 'all'\r\n        };\r\n        setTodoLists([...todoLists, newToDoList]);\r\n        setTasks({...tasks, [newToDoListId]: []});\r\n    };\r\n\r\n\r\n    //GUI:\r\n    const getFilteredTasks = (t: Array<TaskType>, f: FilterValuesType) => {\r\n        let tasksForTodoList = t;\r\n        if (f === 'active') {\r\n            tasksForTodoList = t.filter(t => !t.isDone);\r\n        }\r\n        if (f === 'completed') {\r\n            tasksForTodoList = t.filter(t => t.isDone);\r\n        }\r\n        return tasksForTodoList;\r\n    };\r\n\r\n\r\n    const todoListComponents = todoLists.map(t => {\r\n        return (\r\n            <Grid item key={t.id}>\r\n                <Paper\r\n                    variant={'outlined'}\r\n                    // elevation={10}\r\n                    style={{width: '270px', padding: '20px'}}>\r\n                    <TodoList\r\n\r\n                        todoListId={t.id}\r\n                        filter={t.filter}\r\n                        tasks={getFilteredTasks(tasks[t.id], t.filter)}\r\n                        title={t.todoListTitle}\r\n                        removeTodoList={removeTodoList}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={'outlined'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container>\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {createTheme} from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#1b5e20',\r\n        },\r\n        secondary: {\r\n            main: '#455a64',\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <App/></ThemeProvider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}